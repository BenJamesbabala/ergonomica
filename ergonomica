#!/usr/bin/python
# pylint: disable=W0703

"""
[ergonomica.py]

The ergonomica runtime.
"""

import os
import readline
import autocomplete
from multiprocessing import Process
from parser import tokenize
from verbs import verbs
from error_handler import cmd_check
import re

autocomplete.load()

CMD_HIST = []

try:
    os.chdir(verbs.home + "/.ergo")
except OSError as e:
    os.mkdir(verbs.home + "/.ergo")
    print "Created directory ~/.ergo"
try:
    hist_file = open(verbs.home + "/.ergo/history.ergo_history", 'w+')
except IOError as e:
    print "An error occured while accessing file: " + str(e)

def ergo_run(stdin):
    """Evaluate ergonomica commands."""
    tokens = tokenize(stdin)
    f = lambda: verbs.verbs[tokens[0][0]](tokens[1], tokens[2])
    return Process(target=f)

while verbs.run:
    try:
        STDIN = raw_input("[ergo: %s in %s}> " % (verbs.user, verbs.directory))
        STDOUT = []
        LAST = tokenize(STDIN.split("->")[0])[1]
        EXEC = len(STDIN.split("->"))
        CMD_HIST.append(STDIN)
        BLOCKS = [tokenize(x) for x in STDIN.split("->")]
        for i in range(0, len(BLOCKS)):
            try:
                # map
                if STDIN.split("->")[i][:6] in ["(map) "," (map)"]:
                    f = eval(STDIN.split("->")[i].replace("(map)", ""))
                    LAST = map(f, LAST)
                # filter
                elif STDIN.split("->")[i][:9] in ["(filter) ", " (filter)"]:
                    f = eval(STDIN.split("->")[i].replace("(filter)", ""))
                    LAST = [x for x in LAST if f(x)]
                # match
                elif STDIN.split("->")[i][:8] in ["(match) ", " (match)"]:
                    pattern = re.compile(STDIN.split("->")[i].replace("(match)", ""))
                    LAST = [x for x in LAST if re.match(STDIN.split("->")[i].replace("(match)", "").strip(), x)]
                    print LAST
                EXEC -= 1
                if (cmd_check(BLOCKS[i])):
                    continue
                kwargs = {}
                STDOUT = verbs.verbs[BLOCKS[i][0][0]](LAST, {s.split(":")[0]:s.split(":")[1] for s in BLOCKS[i][2]})

                # filter out none
                try:
                    if isinstance(STDOUT, list):
                        STDOUT = [x for x in STDOUT if x != None]
                except TypeError:
                    STDOUT = []
            except ZeroDivisionError, e:
                STDOUT = repr(e)
                print STDOUT
            if not isinstance(STDOUT, list):
                LAST = [STDOUT]
                if (not EXEC) and (STDOUT != None):
                    print STDOUT
            else:
                LAST = []
                for item in STDOUT:
                    LAST.append(item)
                    if not EXEC:
                        print item
            # for subitem in item:
            #     LAST.append(subitem)
            #     if not EXEC:
            #         print subitem
    except KeyboardInterrupt:
        print "\n"
