#!/usr/bin/python
# -*- coding: utf-8 -*-
# pylint: disable=W0703

# pylint messes up on readline for some reason
# pylint: disable=no-member

# pylint is silly with relative imports
# pylint: disable=relative-import

# decomposing comprehensions would be bad
# pylint: disable=line-too-long

# all code is client-side run under the user's account
# pylint: disable=eval-used

# pylint doesn't know where files are being imported
# pylint: disable=no-name-in-module
# pylint: disable=import-error
# pylint: disable=ungrouped-imports

"""
[ergonomica.py]

The ergonomica runtime.
"""

import os
import itertools
import re
import sys
import traceback

# lib/lib
try:
    from lib.lib import readline
except ImportError:
    import readline

# lib/lang
from lib.lang import completer
from lib.lang.parser import tokenize
from lib.lang.operator import get_operator
from lib.lang.statement import get_statement
from lib.lang.error_handler import get_error_message
from lib.lang.environment import Environment
from lib.lang.error import ErgonomicaError

# lib/load
from lib.load.load_commands import verbs
from lib.load.load_config import load_config

# lib/misc
from lib.misc.arguments import print_arguments
from lib.misc.arguments import process_arguments

# allow autocomplete (tab)
readline.set_completer(completer.completer)
readline.parse_and_bind("tab: complete")

# initialize environment
ENV = Environment()

# read config file
try:
    LINES = open(os.path.expanduser("~/.ergo/.ergo_profile"), 'r').read().split("\n")
    LINES = [x for x in LINES if (x != "") and (x[0] != "#")] # filter out comments
    load_config(ENV, LINES)
except IOError as error:
    print "An error occurred when accessing .ergo_profile: " + str(error)

# read history
try:
    HIST_FILE = open(os.path.expanduser("~/.ergo/.ergo_history"), 'a')
    HIST = open(os.path.expanduser("~/.ergo/.ergo_history"), "r").read().split("\n")
    for item in HIST[:-1]:
        readline.add_history(item)
except IOError as error:
    print "An error occured while accessing ~/.ergo_history: " + str(error)

def ergo(stdin):
    """Main ergonomica runtime."""

    #evaluate variables
    try:
        matches = re.search(r"\$\((.*?)\)", stdin).groups()
        for item in matches:
            stdin = stdin.replace("$(%s)" % (item), verbs.namespace[item])
    except AttributeError:
        pass

    stdout = []

    # args to pipe into next-exec function
    last_args = []
    # (splice)
    lastlast_args = []

    # kwargs to pipe into next-exec function
    last_kwargs = {}
    # kwargs for (splice)
    lastlast_kwargs = {}

    num_blocks = len(stdin.split("->"))
    blocks = stdin.split("->")
    tokenized_blocks = [tokenize(block) for block in stdin.split("->")]
    for i in range(0, len(blocks)):
        try:
            num_blocks -= 1
            operator = get_operator(blocks[i])
            statement = get_statement(blocks[i])

            if blocks[i].strip() == "":
                pass
            elif statement == "run":
                lines = [open(_file, "r").read().split("\n") for _file in tokenized_blocks[i][0][1:]]
                flattened_lines = [item for sublist in lines for item in sublist]
                stdout = map(ergo, flattened_lines)
            # (map) -- map an operator to a list of operands
            elif operator == "map":
                func = eval("lambda x: " + stdin.split("->")[i].replace("(map)", ""))
                lastlast_args = last_args
                last_args = map(func, last_args)
                stdout = last_args

            # (filter) -- return all arguments that match the specified function
            elif operator == "filter":
                func = eval("lambda x: " + stdin.split("->")[i].replace("(filter)", ""))
                lastlast_args = last_args
                last_args = [x for x in last_args if func(x)]
                stdout = last_args

            # (match) -- return all arguments that match the specified regexp
            elif operator == "match":
                lastlast_args = last_args
                last_args = [x for x in last_args if re.match(blocks[i].replace("(match)", "").strip(), x)]
                stdout = last_args

            # (reverse) -- reverse the order of all arguments
            elif operator == "reverse":
                lastlast_args = last_args
                last_args = last_args[::-1]
                stdout = last_args

            # (splice) -- splice the last and 2nd last argument lists together
            elif operator == "splice":
                last_args = list(filter(None, sum(itertools.izip_longest(lastlast_args, last_args), ())))
                stdout = last_args

            # (kwsplice) -- map the last and 2nd last argument lists into a dictionary
            elif operator == "kwsplice":
                lastlast_kwargs = last_kwargs
                last_kwargs = {last_args[i]:lastlast_args[i] for i in range(len(last_args))}

            else:
                func = verbs[tokenized_blocks[i][0][0]]
                args = last_args + tokenized_blocks[i][0][1:]
                last_kwargs.update({s.split(":")[0]:s.split(":")[1] for s in tokenized_blocks[i][1]})
                kwargs = last_kwargs
                stdout = func(ENV, args, kwargs)

            # filter out none values
            try:
                if isinstance(stdout, list):
                    stdout = [x for x in stdout if x != None]
            except TypeError:
                stdout = []

        except Exception, error:
            # if no ergonomica error message can be generated
            if isinstance(error, ErgonomicaError):
                print >> sys.stderr, error 
                return
            if not get_error_message(blocks[i]):
                # fallback to python
                stdout = [traceback.format_exc()]
            else:
                stdout = get_error_message(blocks[i])
        if not isinstance(stdout, list):
            last_args = [stdout]
            if (not num_blocks) and (stdout != None):
                print >> sys.stderr, stdout
        else:
            last_args = []
            for item in stdout:
                last_args.append(item)
                if not num_blocks:
                    print item

GOAL = process_arguments(sys.argv[1:])

if GOAL == "help":
    print_arguments()
    ENV.run = False

if GOAL == "run a file":
    LINES = open(sys.argv[2], "r").read().split("\n")
    map(ergo, LINES)

if GOAL == "run strings":
    map(ergo, sys.argv[2:])

if GOAL == "shell":
    while ENV.run:
        try:
            ergo(raw_input(ENV.prompt.replace("&user", ENV.user).replace("&dir", ENV.directory)))
        except KeyboardInterrupt:
            print "\n^C"
