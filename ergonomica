#!/usr/bin/python
# -*- coding: utf-8 -*-
# pylint: disable=W0703

# pylint messes up on readline for some reason
# pylint: disable=no-member

"""
[ergonomica.py]

The ergonomica runtime.
"""

import os
import itertools
import re
from multiprocessing import Process

# lib/lib
from lib.lib import readline

# lib/lang
from lib.lang import completer
from lib.lang.parser import tokenize
from lib.lang.error_handler import cmd_check

# lib/verbs
from lib.verbs import verbs


readline.set_completer(completer.completer)
readline.parse_and_bind("tab: complete")

try:
    HIST_FILE = open(os.path.expanduser("~/.ergo_history"), 'a')
    HIST = open(os.path.expanduser("~/.ergo_history"), "r").read().split("\n")
    for item in HIST[:-1]:
        readline.add_history(item)
except IOError as e:
    print("An error occured while accessing file: " + str(e))

def ergo_run(stdin):
    """Evaluate ergonomica commands."""
    tokens = tokenize(stdin)
    f = lambda: verbs.verbs[tokens[0][0]](tokens[1], tokens[2])
    return Process(target=f)

while verbs.run:
    try:
        print u"[\u03B5: %s@%s] " % (verbs.user, verbs.directory)
        STDIN = raw_input(" $ ")
        HIST_FILE.write(STDIN + "\n")
        STDOUT = []
        LASTLAST = []
        LAST = tokenize(STDIN.split("->")[0])[1]
        EXEC = len(STDIN.split("->"))
        BLOCKS = STDIN.split("->")
        TOKENIZED_BLOCKS = [tokenize(x) for x in STDIN.split("->")]
        for i in range(0, len(BLOCKS)):
            try:
                #print LAST, LASTLAST
                EXEC -= 1
                # map
                if BLOCKS[i][:6] in ["(map) ", " (map)"]:
                    f = eval("lambda x: " + STDIN.split("->")[i].replace("(map)", ""))
                    LASTLAST = LAST
                    LAST = map(f, LAST)
                    STDOUT = LAST
                # filter
                elif BLOCKS[i][:9] in ["(filter) ", " (filter)"]:
                    f = eval("lambda x: " + STDIN.split("->")[i].replace("(filter)", ""))
                    LASTLAST = LAST
                    LAST = [x for x in LAST if f(x)]
                    STDOUT = LAST
                # match
                elif BLOCKS[i][:8] in ["(match) ", " (match)"]:
                    pattern = re.compile(STDIN.split("->")[i].replace("(match)", ""))
                    LASTLAST = LAST
                    LAST = [x for x in LAST if re.match(BLOCKS[i].replace("(match)", "").strip(), x)]
                elif BLOCKS[i][:9] in ["(splice) ", " (splice)"]:
                    iters = [iter(LAST), iter(LASTLAST)]
                    #LASTLAST = LAST
                    LAST = list(filter(None, sum(itertools.izip_longest(LASTLAST, LAST), ())))
                    #LAST.reverse()
                    STDOUT = LAST
                if (not cmd_check(BLOCKS[i])):
                    func = verbs.verbs[BLOCKS[i][0][0]]
                    args = LAST
                    kwargs = {s.split(":")[0]:s.split(":")[1] for s in BLOCKS[i][2]}
                    STDOUT = func(args, kwargs)

                # filter out none
                try:
                    if isinstance(STDOUT, list):
                        STDOUT = [x for x in STDOUT if x != None]
                except TypeError:
                    STDOUT = []
            except Exception, e:
                STDOUT = repr(e)
                print(STDOUT)
            #LASTLAST = LAST
            if not isinstance(STDOUT, list):
                LAST = [STDOUT]
                if (not EXEC) and (STDOUT != None):
                    print(STDOUT)
            else:
                LAST = []
                for item in STDOUT:
                    LAST.append(item)
                    if not EXEC:
                        print(item)
    except KeyboardInterrupt:
        print("\n")
