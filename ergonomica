#!/usr/bin/python
# pylint: disable=W0703

"""
[ergonomica.py]

The ergonomica runtime.
"""

import os
import readline
#import autocomplete
from multiprocessing import Process
from parser import tokenize
from verbs import verbs
from error_handler import cmd_check
import itertools
import re
import sys

#autocomplete.load()

CMD_HIST = []

try:
    hist_file = open(os.path.expanduser("~/.ergo_history"), 'a')
except IOError as e:
    print("An error occured while accessing file: " + str(e))

def ergo_run(stdin):
    """Evaluate ergonomica commands."""
    tokens = tokenize(stdin)
    f = lambda: verbs.verbs[tokens[0][0]](tokens[1], tokens[2])
    return Process(target=f)

while verbs.run:
    try:
        print "[ergo: %s@%s] " % (verbs.user, verbs.directory)
        STDIN = raw_input("( ")
        hist_file.write(STDIN + "\n")
        STDOUT = []
        LASTLAST = []
        LAST = tokenize(STDIN.split("->")[0])[1]
        EXEC = len(STDIN.split("->"))
        BLOCKS = [tokenize(x) for x in STDIN.split("->")]
        for i in range(0, len(BLOCKS)):
            try:
                #print LAST, LASTLAST
                EXEC -= 1
                # map
                if STDIN.split("->")[i][:6] in ["(map) "," (map)"]:
                    f = eval(STDIN.split("->")[i].replace("(map)", ""))
                    LASTLAST = LAST
                    LAST = map(f, LAST)
                    STDOUT = LAST
                # filter
                elif STDIN.split("->")[i][:9] in ["(filter) ", " (filter)"]:
                    f = eval(STDIN.split("->")[i].replace("(filter)", ""))
                    LASTLAST = LAST
                    LAST = [x for x in LAST if f(x)]
                    STDOUT = LAST
                # match
                elif STDIN.split("->")[i][:8] in ["(match) ", " (match)"]:
                    pattern = re.compile(STDIN.split("->")[i].replace("(match)", ""))
                    LASTLAST = LAST
                    LAST = [x for x in LAST if re.match(STDIN.split("->")[i].replace("(match)", "").strip(), x)]
                elif STDIN.split("->")[i][:9] in ["(splice) ", " (splice)"]:
                    iters = [iter(LAST), iter(LASTLAST)]
                    #LASTLAST = LAST
                    LAST = list(filter(None, sum(itertools.izip_longest(LASTLAST, LAST), ())))
                    #LAST.reverse()
                    STDOUT = LAST
                if (not cmd_check(BLOCKS[i])):
                    kwargs = {}
                    STDOUT = verbs.verbs[BLOCKS[i][0][0]](LAST, {s.split(":")[0]:s.split(":")[1] for s in BLOCKS[i][2]})

                # filter out none
                try:
                    if isinstance(STDOUT, list):
                        STDOUT = [x for x in STDOUT if x != None]
                except TypeError:
                    STDOUT = []
            except Exception, e:
                STDOUT = repr(e)
                print(STDOUT)
            #LASTLAST = LAST
            if not isinstance(STDOUT, list):
                LAST = [STDOUT]
                if (not EXEC) and (STDOUT != None):
                    print(STDOUT)
            else:
                LAST = []
                for item in STDOUT:
                    LAST.append(item)
                    if not EXEC:
                        print(item)
            # for subitem in item:
            #     LAST.append(subitem)
            #     if not EXEC:
            #         print(subitem)
    except KeyboardInterrupt:
        print("\n")
